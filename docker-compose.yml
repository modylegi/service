version: '3.8'

services:
  # app:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   ports:
  #     - "${SERVER_PORT}:${SERVER_PORT}"
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     cache:
  #       condition: service_healthy
  #   environment:
  #     ENV: ${ENV}

  #     SERVER_PORT: ${SERVER_PORT}
  #     SERVER_IDLE_TIMEOUT: ${SERVER_IDLE_TIMEOUT}
  #     SERVER_READ_TIMEOUT: ${SERVER_READ_TIMEOUT}
  #     SERVER_WRITE_TIMEOUT: ${SERVER_WRITE_TIMEOUT}

  #     DB_HOST: db
  #     DB_PORT: ${DB_PORT}
  #     DB_DATABASE: ${DB_DATABASE}
  #     DB_USERNAME: ${DB_USERNAME}
  #     DB_PASSWORD: ${DB_PASSWORD}

  #     CACHE: ${CACHE}
  #     CACHE_HOST: ${CACHE_HOST}
  #     CACHE_PORT: ${CACHE_PORT}
  #     CACHE_PASSWORD: ${CACHE_PASSWORD}

  #     GOOSE_DRIVER: ${GOOSE_DRIVER}
  #     GOOSE_MIGRATION_DIR: /app/migrations
  #     GOOSE_DBSTRING: ${GOOSE_DBSTRING}
  #   volumes:
  #     - ./migrations:/app/migrations
  #   networks:
  #     - app-network

  db:
    image: postgres:latest
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - psql_volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - app-network

  # cache:
  #   image: redis:latest
  #   restart: always
  #   ports:
  #     - "${CACHE_PORT}:${CACHE_PORT}"
  #   command: redis-server --requirepass ${CACHE_PASSWORD}
  #   volumes:
  #     - cache_volume:/data
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 10
  #   networks:
  #     - app-network

volumes:
  psql_volume:
  # cache_volume:

networks:
  app-network:
    driver: bridge

// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	repository "github.com/modylegi/service/internal/domain/repository"
	mock "github.com/stretchr/testify/mock"
)

// BlockRepository is an autogenerated mock type for the BlockRepository type
type BlockRepository struct {
	mock.Mock
}

// FindBlockID provides a mock function with given fields: _a0, _a1
func (_m *BlockRepository) FindBlockID(_a0 context.Context, _a1 repository.Condition) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindBlockID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Condition) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindBlockTitle provides a mock function with given fields: _a0, _a1
func (_m *BlockRepository) FindBlockTitle(_a0 context.Context, _a1 repository.Condition) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FindBlockTitle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Condition) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: _a0, _a1
func (_m *BlockRepository) GetAll(_a0 context.Context, _a1 repository.Condition) ([]repository.BlockContentContentMapping, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []repository.BlockContentContentMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Condition) ([]repository.BlockContentContentMapping, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.Condition) []repository.BlockContentContentMapping); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.BlockContentContentMapping)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.Condition) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIDAndTitleList provides a mock function with given fields: _a0, _a1
func (_m *BlockRepository) GetIDAndTitleList(_a0 context.Context, _a1 repository.Condition) ([]repository.Block, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetIDAndTitleList")
	}

	var r0 []repository.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Condition) ([]repository.Block, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.Condition) []repository.Block); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.Condition) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithoutContentData provides a mock function with given fields: _a0, _a1
func (_m *BlockRepository) GetWithoutContentData(_a0 context.Context, _a1 repository.Condition) ([]repository.BlockContent, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetWithoutContentData")
	}

	var r0 []repository.BlockContent
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.Condition) ([]repository.BlockContent, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.Condition) []repository.BlockContent); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.BlockContent)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.Condition) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBlockRepository creates a new instance of BlockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlockRepository {
	mock := &BlockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
